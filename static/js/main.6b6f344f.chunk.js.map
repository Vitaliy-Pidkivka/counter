{"version":3,"sources":["components/Display/Display.module.scss","components/Button/Button.module.scss","components/Display/Display.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","className","styles","display","maxClass","value","this","onClick","disabled","React","Component","App","state","maxValue","addValue","setState","resetValue","render","Button","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,uB,gBCA3DD,EAAOC,QAAU,CAAC,cAAc,4BAA4B,SAAW,2B,yMCQxDC,EANC,SAACC,GACb,OACI,yBAAKC,UAAS,UAAKC,IAAOC,QAAZ,aAAwBH,EAAMI,UAAYF,IAAM,MAA9D,IAA2EF,EAAMK,Q,uBCW1EN,E,uKAZD,IAAD,EAC8BO,KAAKN,MAAjCK,EADF,EACEA,MAAOE,EADT,EACSA,QAASC,EADlB,EACkBA,SACvB,OACI,4BAAQP,UAAS,UAAKC,IAAO,eAAZ,YAA8BM,GAAYN,IAAM,UACzDK,QAAS,kBAAOA,KAChBC,SAAUA,GACbH,O,GAPKI,IAAMC,WCuCbC,E,4MAnCXC,MAAQ,CACJP,MAAO,EACPQ,SAAU,G,EAEdC,SAAW,WACP,EAAKC,SACD,CACIV,MAAO,EAAKO,MAAMP,MAAQ,K,EAItCW,WAAa,WACT,EAAKD,SAAS,CACVV,MAAO,K,EAGfY,OAAS,kBACL,yBAAKhB,UAAU,OACX,kBAAC,EAAD,CAASI,MAAO,EAAKO,MAAMP,MAClBQ,SAAU,EAAKD,MAAMC,SACrBT,SAAU,EAAKQ,MAAMP,QAAU,EAAKO,MAAMC,WAEnD,6BACI,kBAACK,EAAD,CAAQV,SAAU,EAAKI,MAAMP,QAAU,EAAKO,MAAMC,SAC1CN,QAAS,EAAKO,SACdT,MAAO,QAEf,kBAACa,EAAD,CAAQV,UAAY,EAAKI,MAAMP,MACvBE,QAAS,EAAKS,WACdX,MAAO,a,YA9BbI,IAAMC,WCMJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b6f344f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2aDhU\",\"max\":\"Display_max__abFb7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default-btn\":\"Button_default-btn__2Os4W\",\"disabled\":\"Button_disabled__6CctG\"};","import React from \"react\";\r\nimport styles from \"./Display.module.scss\";\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className={`${styles.display}  ${props.maxClass && styles['max']}`}> {props.value}</div>\r\n    )\r\n}\r\n\r\nexport default Display","import React from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nclass Display extends React.Component {\r\n    render() {\r\n        const {value, onClick, disabled} = this.props\r\n        return (\r\n            <button className={`${styles['default-btn']} ${disabled && styles['disabled']}`}\r\n                    onClick={() => (onClick())}\r\n                    disabled={disabled}>\r\n                {value}\r\n            </button>);\r\n    }\r\n}\r\n\r\n\r\nexport default Display","import React from 'react';\nimport './App.scss';\nimport Display from \"./components/Display/Display\";\nimport Button from \"./components/Button/Button\";\n\n\nclass App extends React.Component {\n    state = {\n        value: 0,\n        maxValue: 5,\n    }\n    addValue = () => {\n        this.setState(\n            {\n                value: this.state.value + 1,\n            }\n        )\n    }\n    resetValue = () => {\n        this.setState({\n            value: 0,\n        })\n    }\n    render = () =>\n        <div className=\"App\">\n            <Display value={this.state.value}\n                     maxValue={this.state.maxValue}\n                     maxClass={this.state.value === this.state.maxValue}\n            />\n            <div>\n                <Button disabled={this.state.value === this.state.maxValue}\n                        onClick={this.addValue}\n                        value={'inc'}\n                />\n                <Button disabled={!(this.state.value)}\n                        onClick={this.resetValue}\n                        value={'reset'}\n                />\n            </div>\n        </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to Display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}